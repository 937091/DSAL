#include<iostream>
using namespace std;
struct node
{
int data;
node *left = NULL;
node *right = NULL;
};
class tree
{
public:
node *root;
tree()
{
root = NULL;
}
void input()
{
char choice;
int nnode;
do {
cout << "Enter Element:";
cin >> nnode;
node* newNode = new node;
newNode->data = nnode;
newNode->left = NULL;
newNode->right = NULL;
if (root == NULL)
{
root = newNode;
}
else
{
node* current = root;
while (true)
{
if (nnode < current->data)
{
if (current->left == NULL)
{
current->left = newNode;
break;
}
current = current->left;
}
else
{
if (current->right == NULL)
{
current->right = newNode;
break;
}
current = current->right;
}
}
}
cout << "Do you want to add another element? (y/n): ";
cin >> choice;
} while (choice == 'y' || choice == 'Y');
}
void display(node* root)
{
if (root != NULL)
{
display(root->left);
cout << root->data << " ";
display(root->right);
}
}
void show()
{
cout << "Inorder traversal of the tree: ";
display(root);
cout << endl;
}
int findMin()
{
if (root == NULL)
{
cout << "The tree is empty." << endl;
return -1;
}
node* current = root;
while (current->left != NULL)
{
current = current->left;
}
return current->data;
}
void search(int value)
{
node* current = root;
while (current != NULL)
{
if (current->data == value)
{
cout<<"Value "<<value<<"is found in the tree."<<endl;
return;
}
else if (value < current->data)
current = current->left;
else
current = current->right;
}
cout << "Value " << value << " is not found in the tree." << endl;
}
int height(node *temp)
{
if(temp==NULL)
{
return -1;
}
else
{
int hl=height(temp->left);
int hr=height(temp->right);
int h=max(hl,hr)+1;
return h;
}
}
void mirror(node *temp)
{
if(temp!=NULL)
{
mirror(temp->left);
mirror(temp->right);
node* temp1 = temp->left;
temp->left=temp->right;
temp->right=temp1;
}
}
};
int main()
{
tree t;
t.input();
t.show();
int minValue = t.findMin();
if (minValue != -1)
{
cout << "The minimum value in the tree is: " << minValue << endl;
}
int searchValue;
cout << "Enter a value to search: ";
cin >> searchValue;
t.search(searchValue);
cout<<"\n no of nodes in the longest path is:"<<t.height(t.root)+1;
t.mirror(t.root);
cout<<"mirroring:";
t.display(t.root);
return 0;
}
